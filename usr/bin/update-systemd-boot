#! /bin/bash

set -e

WHO=$(whoami)

if [[ $WHO != "root" ]]
then
	echo "Please Run as Root"
	exit 100
fi

mkdir -p /tmp/update-systemd-boot/

### GLOBAL ENV VARS ###
SDB_BOOT=$(bootctl -x)
SDB_DRIVE=$(df -P "$SDB_BOOT" | awk 'END{print $1}')
SDB_EFI=$(bootctl -p)
SDB_DRIVE_EFI=$(df -P "$SDB_EFI" | awk 'END{print $1}')
BOOT_DRIVE=$(df -P "/boot" | awk 'END{print $1}')
MACHINE_ID=$(cat /etc/machine-id)
CURRENT_CMD=$(cat /proc/cmdline | cut -f2- -d" ")
### End of region ###

### Help message
if [[ $1 == '-h' ]] ||  [[ $1 == '--help' ]]
then
cat << EOF
 __| |____________________________________________________________________________________________________________________________
(__| |____________________________________________________________________________________________________________________________)
   | |  update-systemd-boot
PikaOS Wrapper for updating systemd-boot configrations

Usage:
update-systemd-boot [arguments if needed]

Arguments:
-h | | --help: Displays this help message.
-w | | --with-os-prober: Does the usual Linux entry generation along side using os prober for detecting Windows EFI partitions.
-x | | --only-os-prober: Uses os prober for detecting Windows EFI partitions without the usual Linux entry generation.
-o | | --change-options: Brings up a text editor to modify the Linux command-line boot options.
 __| |____________________________________________________________________________________________________________________________
(__| |____________________________________________________________________________________________________________________________)
EOF
exit
fi

### End of region ###

### Print system info ###
if [ -z "$SDB_BOOT" ]
then
	echo "Critical Error! systemd-boot isn't installed." & exit 1
else
	echo "systemd-boot BOOT path: $SDB_BOOT"
fi

if [ -z "$SDB_DRIVE" ]
then
	echo "systemd-boot partition: None"
else
	echo "systemd-boot partition: $SDB_DRIVE"
fi

if [ -z "$SDB_EFI" ]
then
	echo "Critical Error! systemd-boot isn't installed." & exit 1
else
	echo "systemd-boot EFI path: $SDB_EFI"
fi

echo "Other EFI partitions:"
rm -rf /tmp/update-systemd-boot/efi_partitions
for partitions in $(os-prober | cut -d/ -f1-3 | tr -d '@' | grep -vi "$SDB_DRIVE_EFI" ); do echo "$partitions" > /tmp/update-systemd-boot/efi_partitions && echo "$partitions"; done


if [ -z "$MACHINE_ID" ]
then
	echo "Machine ID: None"
else
	echo "Machine ID: $MACHINE_ID"
fi

if [ -z "$CURRENT_CMD" ]
then
	echo "Kernel Boot Options: None"
else
	echo "Kernel Boot Options: $CURRENT_CMD"
fi

### Clear NVRAM timeout
#bootctl set-timeout "" || efibootmgr -t -1 || true
# Disabled : breaking some UEFI systems

### Install efifs drivers
mkdir -p $SDB_EFI/EFI/systemd/drivers
echo "Installing\Updating EFI filesystem drivers"
cp -rvf /usr/lib/efifs/drivers/* $SDB_EFI/EFI/systemd/drivers/

### Linux Kernel Images Detection ###
if [[ $1 == '-x' ]] ||  [[ $1 == '--only-os-prober' ]] || [[ $1 == '-o' ]] ||  [[ $1 == '--change-options' ]]
then
	set -e
else
cat << EOF
 _______________________________________
< Detecting Linux Kernel Images in /boot >
 ---------------------------------------
   \'
    \'
        .--.
       |o_o |
       |:_/ |
      //   \ )
     (|     | )
    /'\_   _/;/
    \___)=(___/

EOF

for kernels in $(find /boot/vmlinuz* | cut -d '-' -f2- | grep -vi vmlinuz); do echo "Detected Kernel: $kernels" ; done
### End of region ###

### Linux Kernel Entry Generation ###
echo "Removing old entries."
rm -rfv $SDB_BOOT/"$MACHINE_ID"
rm -rfv $SDB_BOOT/loader/entries/"$MACHINE_ID"*
echo "Generating new entries."
if [[ $BOOT_DRIVE == $SDB_DRIVE ]]
then
for kernels in $(find /boot/vmlinuz* | cut -d '-' -f2- | grep -vi vmlinuz); do echo "Generating entry for $kernels" && echo -e "title\t"$(lsb_release -si)" "$(lsb_release -sr)"\nversion\t"$kernels"\nmachine-id\t"$MACHINE_ID"\nsort-key\t"$(lsb_release -si | tr '[:upper:]' '[:lower:]')"\noptions\t"$CURRENT_CMD"\nlinux\tvmlinuz-"$kernels"\ninitrd\tinitrd.img-"$kernels"" > $SDB_BOOT/loader/entries/"$MACHINE_ID"-"$kernels".conf || echo "Failed to Generate an entry for $kernels"; done
else
echo 'Warning: /boot is not configured as XBOOTLDR for systemd-boot!'
echo 'all kernels will be copied to EFI!'
for kernels in $(find /boot/vmlinuz* | cut -d '-' -f2- | grep -vi vmlinuz); do echo "Generating entry for $kernels" && kernel-install add $kernels /boot/vmlinuz-$kernels /boot/initrd.img-$kernels || echo "Failed to Generate an entry for $kernels"; done
fi
fi
### End of region ###

### Change kernel options ###
if [[ $1 == '-o' ]] ||  [[ $1 == '--change-options' ]]
then
  echo "Changing Linux Boot Options"
  BOOTCTL_CMD=$(cat /proc/cmdline | cut -f2- -d" ")
  if [ ! -f /tmp/update-systemd-boot/options ]
  then
    echo $BOOTCTL_CMD > /tmp/update-systemd-boot/options
    editor /tmp/update-systemd-boot/options
  fi
  ### Linux Kernel Entry Generation ###
  echo "Removing old entries."
  rm -rfv $SDB_BOOT/"$MACHINE_ID"
  rm -rfv $SDB_BOOT/loader/entries/"$MACHINE_ID"*
  echo "Generating new entries."
  if [[ $BOOT_DRIVE == $SDB_DRIVE ]]
  then
    for kernels in $(find /boot/vmlinuz* | cut -d '-' -f2- | grep -vi vmlinuz); do echo "Generating entry for $kernels" && echo -e "title\t"$(lsb_release -si)" "$(lsb_release -sr)"\nversion\t"$kernels"\nmachine-id\t"$MACHINE_ID"\nsort-key\t"$(lsb_release -si | tr '[:upper:]' '[:lower:]')"\noptions\t"$(cat /tmp/update-systemd-boot/options)"\nlinux\tvmlinuz-"$kernels"\ninitrd\tinitrd.img-"$kernels"" > $SDB_BOOT/loader/entries/"$MACHINE_ID"-"$kernels".conf || echo "Failed to Generate an entry for $kernels"; done
  else
    for entries in $(find $SDB_BOOT/loader/entries/$MACHINE_ID*); do sed -i "s#$BOOTCTL_CMD#$(cat /tmp/update-systemd-boot/options)#" "$entries"; done
  fi
  echo "Changed Linux Boot Options"
  echo "from: $BOOTCTL_CMD"
  echo "to: $(cat /tmp/update-systemd-boot/options)"
  rm -rf /tmp/update-systemd-boot/options
fi
### End of region ###

### Windows Boot Manager Detection ###
if [[ $1 == '-w' ]] ||  [[ $1 == '--with-os-prober' ]] || [[ $1 == '-x' ]] ||  [[ $1 == '--only-os-prober' ]]
then
if [ ! -s /tmp/update-systemd-boot/efi_partitions ]
then
cat << EOF
 ________________________________
< Detecting Other EFI ENTRIES >
 --------------------------------
   \'
    \'	   _.-;;-._
    '-..-'|   ||   |
    '-..-'|_.-;;-._|
    '-..-'|   ||   |
    '-..-'|_.-''-._|
EOF
echo "os-prober has not detected a another EFI partition! no action is needed." & exit 0
else

cat << EOF
 ________________________________
< Detecting Other EFI ENTRIES >
 --------------------------------
   \'
    \'	   _.-;;-._
    '-..-'|   ||   |
    '-..-'|_.-;;-._|
    '-..-'|   ||   |
    '-..-'|_.-''-._|
EOF
echo "os-prober has detected a another EFI partition! adding to systemd-boot EFI."
for efis in $(cat /tmp/update-systemd-boot/efi_partitions | cut -d"/" -f2- ); do mkdir -p /tmp/update-systemd-boot/$efis && mount "/$efis" /tmp/update-systemd-boot/$efis && cp -avx /tmp/update-systemd-boot/$efis/EFI $SDB_EFI/ || echo "not EFI" && umount /tmp/update-systemd-boot/$efis; done
exit 0
fi
fi
### End of region ###
