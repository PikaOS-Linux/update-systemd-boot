#! /bin/bash

set -e

WHO=$(whoami)

if [[ $WHO != "root" ]]
then
	echo "Please Run as Root"
	exit 100
fi

mkdir -p /tmp/update-systemd-boot/

### GLOBAL ENV VARS ###
SDB_EFI=$(bootctl -x)
SDB_DRIVE=$(findmnt "$SDB_EFI" | tail +2 | cut -f2 -d" ")
MACHINE_ID=$(cat /etc/machine-id)
CURRENT_CMD=$(bootctl list | grep options | head -n1 | cut -f2- -d":")
### End of region ###

### Help message
if [[ $1 == '-h' ]] ||  [[ $1 == '--help' ]]
then
cat << EOF
 __| |____________________________________________________________________________________________________________________________
(__| |____________________________________________________________________________________________________________________________)
   | |  update-systemd-boot
PikaOS Wrapper for updating systemd-boot configrations

Usage:
update-systemd-boot [arguments if needed]

Arguments:
-h | | --help: Displays this help message.
-w | | --with-os-prober: Does the usual Linux entry generation along side using os prober for detecting Windows EFI partitions.
-x | | --only-os-prober: Uses os prober for detecting Windows EFI partitions without the usual Linux entry generation.
-o | | --change-options: Brings up a text editor to modify the Linux commandline boot options.
 __| |____________________________________________________________________________________________________________________________
(__|_|____________________________________________________________________________________________________________________________)
EOF
exit
fi

### End of region ###

### Print system info ###
if [ -z "$SDB_EFI" ]
then
	echo "Critical Error! systemd-boot isn't installed." & exit 1
else
	echo "systemd-boot EFI path: $SDB_EFI"
fi

if [ -z "$SDB_DRIVE" ]
then
	echo "systemd-boot partition: None"
else
	echo "systemd-boot partition: $SDB_DRIVE"
fi

echo "Other EFI partitions:"
rm -rf /tmp/update-systemd-boot/efi_partitions
for partitions in $(os-prober | cut -d/ -f1-3 | tr -d '@'); do echo "$partitions" > /tmp/update-systemd-boot/efi_partitions && echo "$partitions"; done


if [ -z "$MACHINE_ID" ]
then
	echo "Machine ID: None"
else
	echo "Machine ID: $MACHINE_ID"
fi

if [ -z "$CURRENT_CMD" ]
then
	echo "Kernel Boot Options: None"
else
	echo "Kernel Boot Options: $CURRENT_CMD"
fi


### Linux Kernel Images Detection ###
if [[ $1 == '-x' ]] ||  [[ $1 == '--only-os-prober' ]]
then
	set -e
else
cat << EOF
 _______________________________________
< Detecting Linux Kernel Images in /boot >
 ---------------------------------------
   \'
    \'
        .--.
       |o_o |
       |:_/ |
      //   \ )
     (|     | )
    /'\_   _/;/
    \___)=(___/

EOF

for kernels in $(find /boot/vmlinuz* | cut -d '-' -f2- | grep -vi vmlinuz); do echo "Detected Kernel: $kernels" ; done
### End of region ###

### Linux Kernel Entry Generation ###
echo "Removing old entries."
rm -rfv $SDB_EFI/"$MACHINE_ID"
rm -rfv $SDB_EFI/loader/entries/"$MACHINE_ID"*
echo "Generating new entries."
for kernels in $(find /boot/vmlinuz* | cut -d '-' -f2- | grep -vi vmlinuz); do echo "Generating entry for $kernels" && kernel-install add $kernels /boot/vmlinuz-$kernels /boot/initrd.img-$kernels || echo "Failed to Generate an entry for $kernels"; done 
### End of region ###

### Change kernel options ###
if [[ $1 == '-o' ]] ||  [[ $1 == '--change-options' ]]
then
	echo "Changing Linux Boot Options"
	BOOTCTL_CMD=$(bootctl list | grep options | head -n1 | cut -f2- -d":")
	if [ ! -f /tmp/update-systemd-boot/options ]
	then
		echo $BOOTCTL_CMD > /tmp/update-systemd-boot/options
		editor /tmp/update-systemd-boot/options
	fi
	for entries in $(find $SDB_EFI/loader/entries/$MACHINE_ID*); do sed -i "s#$BOOTCTL_CMD#$(cat /tmp/update-systemd-boot/options)#" "$entries"; done
	echo "Changed Linux Boot Options"
	echo "from: $BOOTCTL_CMD"
	echo "to: $(cat /tmp/update-systemd-boot/options)"
	rm -rf /tmp/update-systemd-boot/
fi
fi
### End of region ###

### Windows Boot Manager Detection ###
if [[ $1 == '-w' ]] ||  [[ $1 == '--with-os-prober' ]] || [[ $1 == '-x' ]] ||  [[ $1 == '--only-os-prober' ]]
then
if [ ! -s /tmp/update-systemd-boot/efi_partitions ]
then
cat << EOF
 ________________________________
< Detecting Other EFI ENTRIES >
 --------------------------------
   \'
    \'	   _.-;;-._
    '-..-'|   ||   |
    '-..-'|_.-;;-._|
    '-..-'|   ||   |
    '-..-'|_.-''-._|
EOF
echo "os-prober has not detected a another EFI partition! no action is needed." & exit 0
else

cat << EOF
 ________________________________
< Detecting Other EFI ENTRIES >
 --------------------------------
   \'
    \'	   _.-;;-._
    '-..-'|   ||   |
    '-..-'|_.-;;-._|
    '-..-'|   ||   |
    '-..-'|_.-''-._|
EOF
echo "os-prober has detected a another EFI partition! adding to systemd-boot EFI."
for efis in $(cat /tmp/update-systemd-boot/efi_partitions); do echo mkdir -p /tmp/update-systemd-boot/$efis && mount "$efis" /tmp/update-systemd-boot/$efis && cp -avx /tmp/update-systemd-boot/$efis/EFI $SDB_EFI/EFI || echo "not EFI" && umount /tmp/update-systemd-boot/$efis; done
exit 0

fi
fi
### End of region ###
